{"version":3,"sources":["../../../src/suites/cts/gpu_test.ts"],"names":["getGPU","Fixture","GPUTest","undefined","init","gpu","adapter","requestAdapter","device","requestDevice","queue","getQueue","expectContents","src","expected","asyncExpectation","exp","Uint8Array","buffer","byteOffset","byteLength","size","dst","createBuffer","usage","GPUBufferUsage","MAP_READ","COPY_DST","c","createCommandEncoder","copyBufferToBuffer","submit","finish","actual","mapReadAsync","expectBuffer","rec","fail","failedPixels","i","expHex","Array","from","map","x","toString","padStart","join","actHex","log"],"mappings":"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","sourcesContent":["import { getGPU } from '../../framework/gpu/implementation.js';\nimport { Fixture } from '../../framework/index.js';\n\n// TODO: Should this gain some functionality currently only in UnitTest?\nexport class GPUTest extends Fixture {\n  device: GPUDevice = undefined!;\n  queue: GPUQueue = undefined!;\n\n  async init(): Promise<void> {\n    super.init();\n    const gpu = getGPU();\n    const adapter = await gpu.requestAdapter();\n    this.device = await adapter.requestDevice({});\n    this.queue = this.device.getQueue();\n  }\n\n  // TODO: add an expectContents for textures, which logs data: uris on failure\n\n  expectContents(src: GPUBuffer, expected: ArrayBufferView): Promise<void> {\n    return this.asyncExpectation(async () => {\n      const exp = new Uint8Array(expected.buffer, expected.byteOffset, expected.byteLength);\n\n      const size = expected.buffer.byteLength;\n      const dst = this.device.createBuffer({\n        size: expected.buffer.byteLength,\n        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n      });\n\n      const c = this.device.createCommandEncoder({});\n      c.copyBufferToBuffer(src, 0, dst, 0, size);\n\n      this.queue.submit([c.finish()]);\n\n      const actual = new Uint8Array(await dst.mapReadAsync());\n      this.expectBuffer(actual, exp);\n    });\n  }\n\n  expectBuffer(actual: Uint8Array, exp: Uint8Array): void {\n    const size = exp.byteLength;\n    if (actual.byteLength !== size) {\n      this.rec.fail('size mismatch');\n      return;\n    }\n    let failedPixels = 0;\n    for (let i = 0; i < size; ++i) {\n      if (actual[i] !== exp[i]) {\n        if (failedPixels > 4) {\n          this.rec.fail('... and more');\n          break;\n        }\n        failedPixels++;\n        this.rec.fail(`at [${i}], expected ${exp[i]}, got ${actual[i]}`);\n      }\n    }\n    if (size <= 256 && failedPixels > 0) {\n      const expHex = Array.from(exp)\n        .map(x => x.toString(16).padStart(2, '0'))\n        .join('');\n      const actHex = Array.from(actual)\n        .map(x => x.toString(16).padStart(2, '0'))\n        .join('');\n      this.rec.log('EXPECT: ' + expHex);\n      this.rec.log('ACTUAL: ' + actHex);\n    }\n  }\n}\n"],"file":"gpu_test.js"}